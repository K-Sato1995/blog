{
  "data": [
    {
      "body": "<h1>h1 Heading 8-)</h1>\n<h2>h2 Heading</h2>\n<h3>h3 Heading</h3>\n<h4>h4 Heading</h4>\n<h5>h5 Heading</h5>\n<h6>h6 Heading</h6>\n<h2>Horizontal Rules</h2>\n<hr>\n<hr>\n<hr>\n<h2>Typographic replacements</h2>\n<p>Enable typographer option to see result.</p>\n<p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p>\n<p>test.. test... test..... test?..... test!....</p>\n<p>!!!!!! ???? ,,  -- ---</p>\n<p>&quot;Smartypants, double quotes&quot; and 'single quotes'</p>\n<h2>Emphasis</h2>\n<p><strong>This is bold text</strong></p>\n<p><strong>This is bold text</strong></p>\n<p><em>This is italic text</em></p>\n<p><em>This is italic text</em></p>\n<p><del>Strikethrough</del></p>\n<h2>Blockquotes</h2>\n<blockquote>\n<p>Blockquotes can also be nested...</p>\n<blockquote>\n<p>...by using additional greater-than signs right next to each other...</p>\n<blockquote>\n<p>...or with spaces between arrows.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2>Lists</h2>\n<p>Unordered</p>\n<ul>\n<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>\n<li>Sub-lists are made by indenting 2 spaces:\n<ul>\n<li>Marker character change forces new list start:\n<ul>\n<li>Ac tristique libero volutpat at</li>\n</ul>\n<ul>\n<li>Facilisis in pretium nisl aliquet</li>\n</ul>\n<ul>\n<li>Nulla volutpat aliquam velit</li>\n</ul></li>\n</ul></li>\n<li>Very easy!</li>\n</ul>\n<p>Ordered</p>\n<ol>\n<li>Lorem ipsum dolor sit amet</li>\n<li>Consectetur adipiscing elit</li>\n<li>Integer molestie lorem at massa</li>\n</ol>\n<ol>\n<li>You can use sequential numbers...</li>\n<li>...or keep all the numbers as <code>1.</code></li>\n</ol>\n<p>Start numbering with offset:</p>\n<ol start=\"57\">\n<li>foo</li>\n<li>bar</li>\n</ol>\n<h2>Code</h2>\n<p>Inline <code>code</code></p>\n<p>Indented code</p>\n<pre><code>// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n</code></pre>\n<p>Block code &quot;fences&quot;</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">Sample</span></span> text here...\n</code></pre>\n<p>Syntax highlighting</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">bar</span>) {\n  <span class=\"hljs-keyword\">return</span> bar++;\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">5</span>));\n</code></pre>\n<h2>Tables</h2>\n<table>\n<thead>\n<tr><th>Option</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>data</td><td>path to data files to supply the data that will be passed into templates.</td></tr>\n<tr><td>engine</td><td>engine to be used for processing templates. Handlebars is the default.</td></tr>\n<tr><td>ext</td><td>extension to be used for dest files.</td></tr>\n</tbody>\n</table>\n<p>Right aligned columns</p>\n<table>\n<thead>\n<tr><th style=\"text-align:right\">Option</th><th style=\"text-align:right\">Description</th></tr>\n</thead>\n<tbody>\n<tr><td style=\"text-align:right\">data</td><td style=\"text-align:right\">path to data files to supply the data that will be passed into templates.</td></tr>\n<tr><td style=\"text-align:right\">engine</td><td style=\"text-align:right\">engine to be used for processing templates. Handlebars is the default.</td></tr>\n<tr><td style=\"text-align:right\">ext</td><td style=\"text-align:right\">extension to be used for dest files.</td></tr>\n</tbody>\n</table>\n<h2>Links</h2>\n<p><a href=\"http://dev.nodeca.com\">link text</a></p>\n<p><a href=\"http://nodeca.github.io/pica/demo/\" title=\"title text!\">link with title</a></p>\n<p>Autoconverted link https://github.com/nodeca/pica (enable linkify to see)</p>\n<h2>Images</h2>\n<p><img src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\"><br>\n<img src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\"></p>\n<p>Like links, Images also have a footnote style syntax</p>\n<p><img src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\"></p>\n<p>With a reference later in the document defining the URL location:</p>\n<h2>Plugins</h2>\n<p>The killer feature of <code>markdown-it</code> is very effective support of<br>\n<a href=\"https://www.npmjs.org/browse/keyword/markdown-it-plugin\">syntax plugins</a>.</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-emoji\">Emojies</a></h3>\n<blockquote>\n<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>\n<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>\n</blockquote>\n<p>see <a href=\"https://github.com/markdown-it/markdown-it-emoji#change-output\">how to change output</a> with twemoji.</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-sub\">Subscript</a> / <a href=\"https://github.com/markdown-it/markdown-it-sup\">Superscript</a></h3>\n<ul>\n<li>19^th^</li>\n<li>H~2~O</li>\n</ul>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-ins\">&lt;ins&gt;</a></h3>\n<p>++Inserted text++</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-mark\">&lt;mark&gt;</a></h3>\n<p>==Marked text==</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-footnote\">Footnotes</a></h3>\n<p>Footnote 1 link<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>.</p>\n<p>Footnote 2 link<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>.</p>\n<p>Inline footnote^[Text of inline footnote] definition.</p>\n<p>Duplicated footnote reference<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2:1\">[2]</a></sup>.</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-deflist\">Definition lists</a></h3>\n<p>Term 1</p>\n<p>:   Definition 1<br>\nwith lazy continuation.</p>\n<p>Term 2 with <em>inline markup</em></p>\n<p>:   Definition 2</p>\n<pre><code>    { some code, part of Definition 2 }\n\nThird paragraph of definition 2.\n</code></pre>\n<p><em>Compact style:</em></p>\n<p>Term 1<br>\n~ Definition 1</p>\n<p>Term 2<br>\n~ Definition 2a<br>\n~ Definition 2b</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-abbr\">Abbreviations</a></h3>\n<p>This is HTML abbreviation example.</p>\n<p>It converts &quot;HTML&quot;, but keep intact partial entries like &quot;xxxHTMLyyy&quot; and so on.</p>\n<p>*[HTML]: Hyper Text Markup Language</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-container\">Custom containers</a></h3>\n<p>::: warning<br>\n<em>here be dragons</em><br>\n:::</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\"  class=\"footnote-item\"><p>Footnote <strong>can have markup</strong></p>\n<p>and multiple paragraphs. <a href=\"#fnref1\" class=\"footnote-backref\">↩</a></p>\n</li>\n<li id=\"fn2\"  class=\"footnote-item\"><p>Footnote text. <a href=\"#fnref2\" class=\"footnote-backref\">↩</a> <a href=\"#fnref2:1\" class=\"footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>\n",
      "title": "Test Title",
      "date": "2022-03-05T00:00:00.000Z",
      "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
      "isCompleted": true,
      "slug": "test-slug",
      "tags": [
        "test-tag"
      ]
    },
    {
      "body": "<p><img src=\"https://user-images.githubusercontent.com/32632542/157171355-6345e6bf-420a-45ca-a0ec-83e0a7d924ef.png\" alt=\"image\"></p>\n",
      "title": "Created my blog with Svelteskit",
      "date": "2022-03-05T00:00:00.000Z",
      "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
      "isCompleted": true,
      "slug": "ruby-getters-and-setters",
      "tags": [
        "test-tag"
      ]
    },
    {
      "body": "<h1>What is a getter method?</h1>\n<h2>Getter OverView</h2>\n<p><strong>A getter method</strong> is a method that <em>gets</em> a value of an instance variable.<br>\nWithout a getter method,<code>code hre</code> you can not retrieve a value of an instance variable outside the class the instance variable is instantiated from.</p>\n<h3>Protip(1)</h3>\n<p><strong>A getter method</strong> is a method that <em>gets</em> a value of an instance variable.<br>\nWithout a getter method, you can not retrieve a value of an instance<br>\nvariable outside the class the instance variable is instantiated from.</p>\n<h3>Protip(2)</h3>\n<p><strong>A getter method</strong> is a method that <em>gets</em> a value of an instance variable.<br>\nWithout a getter method, you can not retrieve a value of an instance variable outside the class the instance variable is instantiated from.</p>\n<h2>Getter Example</h2>\n<p>Here is an example.</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Movie</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(name)</span></span>\n    <span class=\"hljs-variable\">@name</span> = name\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nobj1 = Movie.new(<span class=\"hljs-string\">&#x27;Forrest Gump&#x27;</span>)\np obj1.name <span class=\"hljs-comment\">#=&gt; undefined method `name&#x27; for #&lt;Movie:0x007fecd08cb288 <span class=\"hljs-doctag\">@name</span>=&quot;Forrest Gump&quot;&gt; (NoMethodError)</span>\n</code></pre>\n<p>As you can see,  the value of  <code>obj1</code> (<code>name</code>) can not be retrieved outside <code>Movie</code> class. if you try to retrive a value of an instance variable outside its class without a getter method, Ruby raises <a href=\"http://ruby-doc.org/core-2.5.0/NoMethodError.html\">No Mothod Error</a>.</p>\n<p>Now, Let's see how to retrieve the value of <code>obj1</code> outside <code>Movie</code> class with a getter method.<br>\nAll you have to do here is to define a <code>getter method</code> named <code>name</code>. Though the name of a getter method can be anything, it is common practice to name a getter method the instance variable’s name.</p>\n<pre><code class=\"hljs language-ruby\"> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Movie</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(name)</span></span>\n    <span class=\"hljs-variable\">@name</span> = name\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span></span>\n    <span class=\"hljs-variable\">@name</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nobj1 = Movie.new(<span class=\"hljs-string\">&#x27;Forrest Gump&#x27;</span>)\np obj1.name <span class=\"hljs-comment\">#=&gt; &quot;Forrest Gump&quot;</span>\n</code></pre>\n<h1>What is a setter method?</h1>\n<h2>Setter overview</h2>\n<p><strong>A setter</strong> is a method that <em>sets</em> a value of an instance variable.<br>\nWithout a setter method, you can not assign a value to an instance variable outside its class.<br>\nif you try to set a value of an instance variable outside its class, Ruby raises  <a href=\"http://ruby-doc.org/core-2.5.0/NoMethodError.html\">No Method Error</a> just like it does when you try to retrieve a value of an instance variable outside its class without a getter method.</p>\n<h2>Setter example</h2>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Movie</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(name)</span></span>\n    <span class=\"hljs-variable\">@name</span> = name\n  <span class=\"hljs-keyword\">end</span>\n\n  def name <span class=\"hljs-comment\">#getter method</span>\n    <span class=\"hljs-variable\">@name</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nobj1 = Movie.new(<span class=\"hljs-string\">&#x27;Forrest Gump&#x27;</span>)\np obj1.name <span class=\"hljs-comment\">#=&gt; &quot;Forrest Gump&quot;</span>\nobj1.name = <span class=\"hljs-string\">&#x27;Fight Club&#x27;</span> <span class=\"hljs-comment\">#=&gt; undefined method `name=&#x27; for #&lt;Movie:0x007f9937053368 <span class=\"hljs-doctag\">@name</span>=&quot;Forrest Gump&quot;&gt; (NoMethodError)</span>\n</code></pre>\n<p>Defining a setter method inside a class makes it possible to set a value of an instance variable outside the class.<br>\nYou can define a setter method like the code below.</p>\n<pre><code class=\"hljs language-ruby\"> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Movie</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(name)</span></span>\n    <span class=\"hljs-variable\">@name</span> = name\n  <span class=\"hljs-keyword\">end</span>\n\n  def name <span class=\"hljs-comment\">#getter method</span>\n    <span class=\"hljs-variable\">@name</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name=</span><span class=\"hljs-params\">(name)</span></span> <span class=\"hljs-comment\">#setter method</span>\n    <span class=\"hljs-variable\">@name</span> = name\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nobj1 = Movie.new(<span class=\"hljs-string\">&#x27;Forrest Gump&#x27;</span>)\np obj1.name <span class=\"hljs-comment\">#=&gt; &quot;Forrest Gump&quot;</span>\nobj1.name = <span class=\"hljs-string\">&#x27;Fight Club&#x27;</span>\np obj1.name <span class=\"hljs-comment\">#=&gt; &quot;Fight Club&quot;</span>\n</code></pre>\n<p>By using <code>name=</code>, you can now assign a new value <code>Fight Club</code> to <code>obj1</code>.</p>\n<h1>What are accessors?</h1>\n<p><code>Accessors</code> are a way to create getter and setter methods without explicitly defining them in a class.<br>\nThere are three types fo accessors in Ruby.</p>\n<ul>\n<li><code>attr_reader</code> automatically generates a getter method for each given attribute.</li>\n<li><code>attr_writer</code> automatically generates a setter method for each given attribute.</li>\n<li><code>attr_accessor</code> automatically generates a getter and setter method for each given attribute.</li>\n</ul>\n<p>First, let's take a look at <code>attr_reader</code>!<br>\nAs you can see in the code below, <code>name</code> and <code>year</code> are retrieved outside <code>Movie</code> class even though there is no getter method for either of them. This is because <code>attr_reader</code> generates a getter method for each given attribute.</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Movie</span></span>\n <span class=\"hljs-keyword\">attr_reader</span> <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:year</span>\n\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(name, year)</span></span>\n   <span class=\"hljs-variable\">@name</span> = name\n   <span class=\"hljs-variable\">@year</span> = year\n <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\nobj1 = Movie.new(<span class=\"hljs-string\">&#x27;Forrest Gump&#x27;</span>, <span class=\"hljs-number\">1994</span>)\np obj1.name <span class=\"hljs-comment\">#=&gt; Forrest Gump</span>\np obj1.year <span class=\"hljs-comment\">#=&gt; 1994</span>\n</code></pre>\n<p>Second, let's see how <code>attr_writer</code> works!<br>\nAs I mentioned above, <code>attr_witer</code> generates a setter method for each given attribute. Therefore you can assign new values to <code>ob1</code> without explicitly writing setter methods for <code>name</code> and <code>year</code>!</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Movie</span></span>\n  <span class=\"hljs-keyword\">attr_reader</span> <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:year</span> \n  <span class=\"hljs-keyword\">attr_writer</span> <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:year</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(name, year)</span></span>\n    <span class=\"hljs-variable\">@name</span> = name\n    <span class=\"hljs-variable\">@year</span> = year\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\nobj1 = Movie.new(<span class=\"hljs-string\">&#x27;Forrest Gump&#x27;</span>, <span class=\"hljs-number\">1994</span>)\nobj1.name = <span class=\"hljs-string\">&#x27;Fight Club&#x27;</span>\nobj1.year = <span class=\"hljs-number\">1999</span>\np obj1.name <span class=\"hljs-comment\">#=&gt; &quot;Fight Club&quot;</span>\np obj1.year <span class=\"hljs-comment\">#=&gt; 1999</span>\n</code></pre>\n<p>Last but certainly not least, <code>attr_accessor</code> does what <code>attr_reader</code> and <code>attr_writer</code> do with just one line of code! It will automatically generate a getter and setter mehod for each given attribute.</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Movie</span></span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:year</span>\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(name, year)</span></span>\n    <span class=\"hljs-variable\">@name</span> = name\n    <span class=\"hljs-variable\">@year</span> = year\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\nobj1 = Movie.new(<span class=\"hljs-string\">&#x27;Forrest Gump&#x27;</span>, <span class=\"hljs-number\">1994</span>)\nobj1.name = <span class=\"hljs-string\">&#x27;Fight Club&#x27;</span>\nobj1.year = <span class=\"hljs-number\">1999</span>\np obj1.name <span class=\"hljs-comment\">#=&gt; &quot;Fight Club&quot;</span>\np obj1.year <span class=\"hljs-comment\">#=&gt; 1999</span>\n</code></pre>\n<h1>References</h1>\n<ul>\n<li><a href=\"https://k-blog0130.herokuapp.com/posts/2\">Ruby Getters and Setters</a></li>\n<li><a href=\"https://medium.com/@rondwalker22/how-getter-setter-methods-work-in-ruby-c5f5da07f99\">How getter/setter methods work in Ruby</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby\">What is attr_accessor in Ruby?</a></li>\n<li><a href=\"http://rubylearning.com/satishtalim/ruby_syntactic_sugar.html\">rubylearning.com</a></li>\n</ul>\n",
      "title": "Ruby Getters and Setters",
      "date": "2022-03-05T00:00:00.000Z",
      "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
      "isCompleted": true,
      "slug": "ruby-getters-and-setters",
      "tags": [
        "test-tag"
      ]
    },
    {
      "body": "<h2>Snarkdown</h2>\n<p><img src=\"http://emojipop.net/data/images/emoji_set_77.png\" alt=\"snarkdown\"></p>\n<p><em><a href=\"http://github.com/developit/snarkdown\">Snarkdown</a></em> is <strong>easy</strong> to <code>use</code>!</p>\n<p>Here's an <a href=\"#example\"><strong>important</strong> anchor link</a>.</p>\n<p>Two newlines creates a line break.</p>\n<p>Or, end a line with two spaces.<br>\nJust like that!</p>\n<h2>Code &amp; Poetry</h2>\n<pre><code>You can also indent\nblocks to display\ncode or poetry.\n\nIndented code/poetry blocks  \ncan be hard-wrapped.\n</code></pre>\n<p><strong>Or, wrap your code in three backticks:</strong></p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">codeBlocks</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Can be inserted&#x27;</span>;\n}\n</code></pre>\n<h3>Block Quotes</h3>\n<blockquote>\n<p>You can insert quotes by<br>\npreceeding each line with <code>&gt;</code>.</p>\n<p>Blockquotes can also contain line<br>\nbreaks.</p>\n</blockquote>\n<h2>Lists</h2>\n<ul>\n<li>Unordered</li>\n</ul>\n<ul>\n<li>Lists</li>\n</ul>\n<ul>\n<li>Of mixed type</li>\n</ul>\n<ol>\n<li>Ordered</li>\n<li>Lists</li>\n<li>Numbers are ignored</li>\n</ol>\n",
      "title": "Blog post",
      "date": "2022-03-06T00:00:00.000Z",
      "description": "Needed for SEO",
      "isCompleted": true,
      "slug": "blog-post",
      "tags": [
        "test-tag"
      ]
    }
  ]
}